#+TITLE: Spacemacs configuration
#+AUTHOR: Arnav Sharma
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+PROPERTY: header-args :tangle yes

* What is this?
This is my spacemacs literate config. It is highly individualized. The file is tangled into =.spacemacs= at runtime using =org-babel-load-file=.

* Installation
** Tools
#+BEGIN_SRC sh :tangle no
brew install ripgrep
#+END_SRC

* Spacemacs centric config
** Layers
#+BEGIN_SRC emacs-lisp :tangle no

  (defun dotspacemacs/layers ()
    (setq-default
     dotspacemacs-distribution 'spacemacs
     dotspacemacs-configuration-layer-path '()

     dotspacemacs-configuration-layers
     '(javascript
       html
       csv
       auto-completion
       better-defaults
       emacs-lisp
       evil-commentary
       python
       ipython-notebook
       ivy
       go
       git
       pdf
       markdown
       evil-commentary
       finance
       org
       yaml
       shell
       syntax-checking
       spotify
       latex
       treemacs
       chrome
       )

     dotspacemacs-additional-packages '(fish-completion
                                        thrift
                                        ob-go
                                        org-gcal
                                        real-auto-save
                                        org-cliplink
                                        doom-themes
                                        go-direx
                                        org-autolist
                                        )

     dotspacemacs-excluded-packages '(org-projectile
                                      )
     dotspacemacs-delete-orphan-packages t
     ))
#+END_SRC
** Styles and other config
#+BEGIN_SRC emacs-lisp :tangle no
  (defun dotspacemacs/init ()
    "Initialization function.
  This function is called at the very startup of Spacemacs initialization
  before layers configuration.
  You should not put any user code in there besides modifying the variable
  values."
    (setq-default
     dotspacemacs-elpa-https t
     dotspacemacs-elpa-timeout 5
     dotspacemacs-check-for-update t
     dotspacemacs-editing-style 'vim
     dotspacemacs-verbose-loading t
     dotspacemacs-startup-banner 'official
     dotspacemacs-startup-lists '(recents projects)
     dotspacemacs-startup-recent-list-size 5
     dotspacemacs-scratch-mode 'text-mode
     dotspacemacs-themes '(doom-vibrant
                           zenburn
                           gruvbox-dark-soft
                           spacemacs-light
                           moe-dark
                           tsdh-dark
                           solarized-dark)
     dotspacemacs-colorize-cursor-according-to-state t
     dotspacemacs-default-font '("Source Code Pro"
                                 :size 12
                                 :weight normal
                                 :width normal
                                 :powerline-offset 2)
     dotspacemacs-leader-key "SPC"
     dotspacemacs-emacs-leader-key "M-m"
     dotspacemacs-major-mode-emacs-leader-key "C-M-m"
     dotspacemacs-distinguish-gui-tab t
     dotspacemacs-command-key ":"
     dotspacemacs-remap-Y-to-y$ t
     dotspacemacs-default-layout-name "Default"
     dotspacemacs-display-default-layout t
     dotspacemacs-auto-resume-layouts nil
     dotspacemacs-auto-save-file-location 'cache
     dotspacemacs-max-rollback-slots 5
     ;; use ivy anyway - does not matter
     dotspacemacs-use-ido nil
     dotspacemacs-helm-resize nil
     dotspacemacs-helm-no-header t
     dotspacemacs-helm-position 'bottom
     dotspacemacs-enable-paste-micro-state t
     ;; use a higher which key delay to make emacs do less
     ;; it anyway does enough
     dotspacemacs-which-key-delay 0.6
     dotspacemacs-which-key-position 'bottom
     dotspacemacs-loading-progress-bar t
     dotspacemacs-fullscreen-at-startup t
     dotspacemacs-fullscreen-use-non-native nil
     dotspacemacs-maximized-at-startup nil
     dotspacemacs-active-transparency 90
     dotspacemacs-inactive-transparency 90
     dotspacemacs-mode-line-unicode-symbols t
     dotspacemacs-smooth-scrolling t
     ;; no other form of line numbering is worth it
     dotspacemacs-line-numbers 'relative
     dotspacemacs-smartparens-strict-mode nil
     dotspacemacs-highlight-delimiters 'all
     dotspacemacs-persistent-server nil
     ;; rg over everything else else
     dotspacemacs-search-tools '("rg" "ag" "pt" "ack" "grep")
     dotspacemacs-default-package-repository nil
     ;; delete trailing linespace
     dotspacemacs-whitespace-cleanup 'trailing

     ))
#+END_SRC
* User Config
** Generic emacs config
save on =s= in normal mode
#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map (kbd "s") 'save-buffer)
#+END_SRC
** Eshell
[[https://gitlab.com/ambrevar/emacs-fish-completion][Fish like completion]] to help with completion in eshell
#+BEGIN_SRC emacs-lisp
  (use-package fish-completion
    :ensure t
    :config
    (global-fish-completion-mode)
    )
#+END_SRC
** Counsel
Counsel Rg to truncate all lines greater than 120 lines ([[https://oremacs.com/2018/03/05/grep-exclude/][source]])
#+BEGIN_SRC emacs-lisp
  (setq counsel-rg-base-command
        "rg -i -M 120 --no-heading --line-number --color never %s ")
#+END_SRC

Ivy occur remapping to =C-c o= ([[https://oremacs.com/2015/11/04/ivy-occur/][source]])
#+BEGIN_SRC emacs-lisp
  (define-key ivy-minibuffer-map (kbd "C-c o") 'ivy-occur)
#+END_SRC
** Company mode
Low company idle delay
#+BEGIN_SRC emacs-lisp
  (setq company-idle-delay 0.2)
#+END_SRC

Trigger company completion everytime
#+BEGIN_SRC emacs-lisp
  (setq company-minimum-prefix-length 0)
#+END_SRC

Trigger company completion only when 3 chars have been typed
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
            (lambda () ((set (make-local-variable company-minimum-prefix-length) 3)
                        ))
#+END_SRC

#+RESULTS:
** Evil goggles

Evil googles highlight what is yanked etc in evil mode ([[https://github.com/edkolev/evil-goggles][source]])
#+BEGIN_SRC emacs-lisp
  (use-package evil-goggles
    :ensure t
    :config
    (evil-goggles-mode)

    ;; optionally use diff-mode's faces; as a result, deleted text
    ;; will be highlighed with `diff-removed` face which is typically
    ;; some red color (as defined by the color theme)
    ;; other faces such as `diff-added` will be used for other actions
    (evil-goggles-use-diff-faces))

#+END_SRC
** Doom theme configuration
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; treemacs
    (doom-themes-treemacs-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config)
    )

#+END_SRC
** Go mode
go-direx to show what all is contained in a go file. remap =,,= to =gofmt=.
#+BEGIN_SRC emacs-lisp
  (use-package go-direx
    :ensure t
    :config
    (spacemacs/set-leader-keys-for-major-mode 'go-mode "=" 'go-direx-pop-to-buffer)
    (spacemacs/set-leader-keys-for-major-mode 'go-mode "," 'gofmt)
    )
#+END_SRC
** LSP configuration
Langauge Server settings. Currently disabled.

Disable lsp ui ([[https://github.com/syl20bnr/spacemacs/issues/11265][source]]) and stop creating lock files ([[https://github.com/emacs-lsp/lsp-mode/issues/378][source]])
#+BEGIN_SRC emacs-lisp :tangle no
  (setq lsp-ui-flycheck-enable nil)
  (setq create-lockfiles nil)
#+END_SRC
* Finish loading
#+BEGIN_SRC emacs-lisp
(message "Successfully loaded the dotspacemacs: booyeah")
#+END_SRC

#+RESULTS:
: Successfully loaded the dotspacemacs: booyeah
