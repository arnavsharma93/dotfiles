#+TITLE: Spacemacs configuration
#+AUTHOR: Arnav Sharma
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes
#+OPTIONS: toc:2
* What is this?
# This is my spacemacs literate config. It is highly individualized. The file is tangled into =.spacemacs= at runtime using =org-babel-load-file=.
* Table of Contents                                                     :TOC:
- [[#what-is-this][What is this?]]
- [[#installation][Installation]]
  - [[#tools][Tools]]
  - [[#go-related-installations][Go Related Installations]]
  - [[#dotspacemacs][Dotspacemacs]]
- [[#spacemacs-centric-config][Spacemacs centric config]]
  - [[#layers][Layers]]
  - [[#styles-and-other-config][Styles and other config]]
- [[#user-config][User Config]]
  - [[#generic-emacs-config][Generic emacs config]]
  - [[#eshell][Eshell]]
  - [[#flycheck][Flycheck]]
  - [[#counsel][Counsel]]
  - [[#ivy-config][Ivy config]]
  - [[#alert-config][Alert config]]
  - [[#company-mode][Company mode]]
  - [[#evil-goggles][Evil goggles]]
  - [[#doom-theme-configuration][Doom theme configuration]]
  - [[#go-mode-1][Go mode]]
  - [[#lsp-configuration][LSP configuration]]
  - [[#file-mode-configurations][File mode configurations]]
  - [[#org-mode][Org mode]]
    - [[#babel-settings][Babel settings]]
    - [[#custom-functions][Custom functions]]
    - [[#column-view][Column view]]
    - [[#clocking][Clocking]]
    - [[#generic][Generic]]
    - [[#export][Export]]
    - [[#gtd][GTD]]
  - [[#git-settings][Git settings]]
  - [[#shell-settings][Shell settings]]
  - [[#pdf-settings][PDF settings]]
  - [[#autosave-go-and-emacs-buffer][Autosave go and emacs buffer]]
  - [[#tramp-mode][Tramp mode]]
  - [[#avy][Avy]]
  - [[#midnight][Midnight]]
- [[#finish-loading][Finish loading]]

* Installation
** Tools
#+BEGIN_SRC sh :tangle no
brew install ripgrep
#+END_SRC
** Go Related Installations
#+BEGIN_SRC sh :tangle no
  go get -u -v github.com/mdempsky/gocode
  go get -u -v github.com/rogpeppe/godef
  go get -u github.com/golangci/golangci-lint/cmd/golangci-lint
  go get -u -v github.com/fatih/gomodifytags
  go get -u -v github.com/godoctor/godoctor
  go install github.com/godoctor/godoctor
  go get -u -v golang.org/x/tools/cmd/guru
  go get -u -v golang.org/x/tools/cmd/gorename
  go get -u -v github.com/zmb3/gogetdoc
  go get -u -v github.com/cweill/gotests/...
  go get -u github.com/haya14busa/gopkgs/cmd/gopkgs
  go get -u -v github.com/davidrjenni/reftools/cmd/fillstruct
  go get -u github.com/josharian/impl
  go get -u github.com/jstemmer/gotags
  go get golang.org/x/tools/cmd/goimports
#+END_SRC
** Dotspacemacs
Add this inside dotspacemacs to the file going, assuming the repo is checked out in the home folder
#+BEGIN_SRC emacs-lisp :tangle no
   (org-babel-load-file "~/dotfiles/spacemacs.org")
#+END_SRC
* Spacemacs centric config
** Layers
#+BEGIN_SRC emacs-lisp :tangle no

  (defun dotspacemacs/layers ()
    (setq-default
     dotspacemacs-distribution 'spacemacs
     dotspacemacs-configuration-layer-path '()

     dotspacemacs-configuration-layers
     '(javascript
       html
       csv
       auto-completion
       better-defaults
       emacs-lisp
       evil-commentary
       python
       ipython-notebook
       ivy
       go
       git
       pdf
       markdown
       evil-commentary
       finance
       org
       yaml
       shell
       syntax-checking
       spotify
       latex
       treemacs
       chrome
       )

     dotspacemacs-additional-packages '(fish-completion
                                        thrift
                                        ob-go
                                        org-gcal
                                        real-auto-save
                                        org-cliplink
                                        doom-themes
                                        go-direx
                                        org-autolist
                                        )

     dotspacemacs-excluded-packages '(org-projectile
                                      )
     dotspacemacs-delete-orphan-packages t
     ))
#+END_SRC
** Styles and other config
#+BEGIN_SRC emacs-lisp :tangle no
  (defun dotspacemacs/init ()
    "Initialization function.
  This function is called at the very startup of Spacemacs initialization
  before layers configuration.
  You should not put any user code in there besides modifying the variable
  values."
    (setq-default
     dotspacemacs-elpa-https t
     dotspacemacs-elpa-timeout 5
     dotspacemacs-check-for-update t
     dotspacemacs-editing-style 'vim
     dotspacemacs-verbose-loading t
     dotspacemacs-startup-banner 'official
     dotspacemacs-startup-lists '(recents projects)
     dotspacemacs-startup-recent-list-size 5
     dotspacemacs-scratch-mode 'text-mode
     dotspacemacs-themes '(doom-vibrant
                           zenburn
                           gruvbox-dark-soft
                           spacemacs-light
                           moe-dark
                           tsdh-dark
                           solarized-dark)
     dotspacemacs-colorize-cursor-according-to-state t
     dotspacemacs-default-font '("Source Code Pro"
                                 :size 12
                                 :weight normal
                                 :width normal
                                 :powerline-offset 2)
     dotspacemacs-leader-key "SPC"
     dotspacemacs-emacs-leader-key "M-m"
     dotspacemacs-major-mode-emacs-leader-key "C-M-m"
     dotspacemacs-distinguish-gui-tab t
     dotspacemacs-command-key ":"
     dotspacemacs-remap-Y-to-y$ t
     dotspacemacs-default-layout-name "Default"
     dotspacemacs-display-default-layout t
     dotspacemacs-auto-resume-layouts nil
     dotspacemacs-auto-save-file-location 'cache
     dotspacemacs-max-rollback-slots 5
     ;; use ivy anyway - does not matter
     dotspacemacs-use-ido nil
     dotspacemacs-helm-resize nil
     dotspacemacs-helm-no-header t
     dotspacemacs-helm-position 'bottom
     dotspacemacs-enable-paste-micro-state t
     ;; use a higher which key delay to make emacs do less
     ;; it anyway does enough
     dotspacemacs-which-key-delay 0.6
     dotspacemacs-which-key-position 'bottom
     dotspacemacs-loading-progress-bar t
     dotspacemacs-fullscreen-at-startup t
     dotspacemacs-fullscreen-use-non-native nil
     dotspacemacs-maximized-at-startup nil
     dotspacemacs-active-transparency 90
     dotspacemacs-inactive-transparency 90
     dotspacemacs-mode-line-unicode-symbols t
     dotspacemacs-smooth-scrolling t
     ;; no other form of line numbering is worth it
     dotspacemacs-line-numbers 'relative
     dotspacemacs-smartparens-strict-mode nil
     dotspacemacs-highlight-delimiters 'all
     dotspacemacs-persistent-server nil
     ;; rg over everything else else
     dotspacemacs-search-tools '("rg" "ag" "pt" "ack" "grep")
     dotspacemacs-default-package-repository nil
     ;; delete trailing linespace
     dotspacemacs-whitespace-cleanup 'trailing

     ))
#+END_SRC
* User Config
** Generic emacs config

Set my email
#+BEGIN_SRC emacs-lisp
 (setq user-mail-address "arnavsharma93@gmail.com")
#+END_SRC
save on =s= in normal mode
#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map (kbd "s") 'save-buffer)
#+END_SRC

Don't move cursor back on exiting insert state
#+BEGIN_SRC emacs-lisp
  (setq evil-move-cursor-back nil)
#+END_SRC

GC settings
#+BEGIN_SRC emacs-lisp
 (setq garbage-collection-messages t)
 (setq large-file-warning-threshold 100000000)

#+END_SRC

Reload and find my dotspacemacs configuration
#+BEGIN_SRC emacs-lisp
     (defun my-reload-config ()
       (interactive)
       (with-eval-after-load 'org
         (org-babel-load-file "~/dotfiles/spacemacs.org"))
     )

  (defun my-find-dotfile ()
    "Edit the `dotfile', in the current window."
    (interactive)
    (find-file-existing "~/dotfiles/spacemacs.org"))

    (spacemacs/set-leader-keys
      "feM" 'my-reload-config
      "fem" 'my-find-dotfile
      )

#+END_SRC

** Eshell
[[https://gitlab.com/ambrevar/emacs-fish-completion][Fish like completion]] to help with completion in eshell
#+BEGIN_SRC emacs-lisp
  (use-package fish-completion
    :ensure t
    :config
    (global-fish-completion-mode)
    )
  (setq shell-default-shell 'eshell)
#+END_SRC

Some configuration copied from [[https://github.com/howardabrams/dot-files/blob/master/emacs-eshell.org][here]]
#+BEGIN_SRC emacs-lisp
  (use-package eshell
    :ensure t
    :init
    (setq ;; eshell-buffer-shorthand t ...  Can't see Bug#19391
     eshell-scroll-to-bottom-on-input 'all
     eshell-error-if-no-glob t
     eshell-history-size 50000
     eshell-hist-ignoredups t
     eshell-save-history-on-exit t
     eshell-prefer-lisp-functions nil
     eshell-destroy-buffer-when-process-dies t)
    (add-hook 'eshell-mode-hook
              (lambda ()
                (add-to-list 'eshell-visual-commands "ssh")
                (add-to-list 'eshell-visual-commands "tail")
                (add-to-list 'eshell-visual-commands "htop")))
    )
#+END_SRC

Enable Plan9 like smart shell ([[https://www.masteringemacs.org/article/complete-guide-mastering-eshell][source]])
#+BEGIN_SRC emacs-lisp
(setq shell-enable-smart-eshell t)
#+END_SRC

#+RESULTS:
: t

Clear on =,-l=
#+BEGIN_SRC emacs-lisp
   (defun clear ()
     "Clear the eshell buffer."
     (interactive)
     (let ((inhibit-read-only t))
       (erase-buffer)
       (eshell-send-input)))

  (spacemacs/set-leader-keys-for-major-mode 'eshell-mode "l" 'eshell-clear)
#+END_SRC

Get history on =,-h=
#+BEGIN_SRC emacs-lisp
  (spacemacs/set-leader-keys-for-major-mode 'eshell-mode "h" 'counsel-esh-history)
#+END_SRC

Overwriting spacemacs eshell popup as it does not remember history ([[https://github.com/syl20bnr/spacemacs/issues/8538][issue]], [[https://github.com/howardabrams/dot-files/blob/master/emacs-eshell.org][source]])
#+BEGIN_SRC emacs-lisp
  ;; create a new eshell
  (defun eshell-new (name)

    ;; if current buffer is not of eshell
    ;; create a new window in the bottom third
  ;; TODO: fix window sizes when more than one vertical split is present

    (if (not (string= (print major-mode) "eshell-mode"))
        (progn
          (split-window-below (- (/ (window-total-height) 3)))
          (windmove-down)

          ))

    (enlarge-window-horizontally (- (/ (* (frame-width) shell-default-width)
                                       100)
                                    (window-width)))
    ;; if buffer name not available - create a new buffer, else switch
    (if (not (get-buffer name))
        (progn
          (eshell "new")
          (setq shellname (concat "*eshell: " name "*"))
          (rename-buffer  shellname))
      (switch-to-buffer name))
    )
#+END_SRC

#+RESULTS:
: eshell-new


Call ivy to show eshell buffers - open one if buffer does not exist. Bind to =<SPC>-'=
#+BEGIN_SRC emacs-lisp

  (defun ivy-eshell-new ()
    (interactive)
    ;; find all open buffers of eshell
    (ivy-read "Eshell Buffers:" (mapcar #'buffer-name
                                        (cl-remove-if-not
                                         (lambda (buf)
                                           (with-current-buffer buf
                                             (eq major-mode 'eshell-mode)))
                                         (buffer-list))
                                        )
              :action '(1
                        ("s" eshell-new "switch to buffer"))
              ))
  (spacemacs/set-leader-keys
    "'" 'ivy-eshell-new
    )
#+END_SRC


Eshell quit on =,-q= in normal mode
#+BEGIN_SRC emacs-lisp
  (defun exit-eshell-and-delete-window ()
  (interactive)
  (eshell-life-is-too-much)
  (delete-window))

  (defun delete-eshell-window ()
  (interactive)
  (delete-window))

  (spacemacs/set-leader-keys-for-major-mode 'eshell-mode "Q" 'exit-eshell-and-delete-window)
  (spacemacs/set-leader-keys-for-major-mode 'eshell-mode "q" 'delete-eshell-window)
#+END_SRC



** Flycheck

Flycheck hangs up in case of huge buffers ([[https://www.reddit.com/r/emacs/comments/7mjyz8/flycheck_syntax_checking_makes_editing_files/][source]]) - found this out when profiled the code
#+BEGIN_SRC emacs-lisp
  (setq flycheck-idle-change-delay 3)
  (setq flycheck-check-syntax-automatically '(save mode-enable idle-change))
#+END_SRC

#+RESULTS:
| save | mode-enable | idle-change |

** Counsel
Counsel Rg to truncate all lines greater than 120 lines ([[https://oremacs.com/2018/03/05/grep-exclude/][source]])
#+BEGIN_SRC emacs-lisp
  (setq counsel-rg-base-command
        "rg -i -M 120 --no-heading --line-number --color never %s ")
#+END_SRC

Ivy occur remapping to =C-c o= ([[https://oremacs.com/2015/11/04/ivy-occur/][source]])
#+BEGIN_SRC emacs-lisp
  (define-key ivy-minibuffer-map (kbd "C-c o") 'ivy-occur)
#+END_SRC

Remap =counsel-projectile-find-file= to =pa= and use =counsel-git= as =pf=
#+BEGIN_SRC emacs-lisp
 (spacemacs/set-leader-keys
   "pa" 'counsel-projectile-find-file
   "pf" 'counsel-git
   )

#+END_SRC

#+RESULTS:
** Ivy config
Define ivy builders per function ([[https://emacs.stackexchange.com/questions/36745/enable-ivy-fuzzy-matching-everywhere-except-in-swiper][related source]])
#+BEGIN_SRC emacs-lisp
 (setq ivy-re-builders-alist '((counsel-M-x . ivy--regex-fuzzy)
                               (counsel-describe-function . ivy--regex-fuzzy)
                               (counsel-git . ivy--regex-fuzzy)
                               (counsel-projectile-find-file . ivy--regex-fuzzy)
                               (counsel-find-file . ivy--regex-fuzzy)
                               (counsel-describe-variable . ivy--regex-fuzzy)
                               (spacemacs/counsel-search . spacemacs/ivy--regex-plus)
                               (t . ivy--regex-ignore-order))

  )
#+END_SRC

Enable switching to the /special/ buffers & create and set a view ([[http://irreal.org/blog/?p=5355][source]])
#+BEGIN_SRC emacs-lisp
  (setq ivy-use-virtual-buffers t)

  (global-set-key (kbd "C-c v") 'ivy-push-view)
  (global-set-key (kbd "C-c V") 'ivy-pop-view)
  (global-set-key (kbd "C-c s") 'ivy-switch-view)
#+END_SRC
** Alert config
#+BEGIN_SRC emacs-lisp
  (use-package alert
  :ensure t
  :config
  (setq alert-default-style 'osx-notifier)
  )
#+END_SRC

#+RESULTS:
: t

** Company mode
Low company idle delay
#+BEGIN_SRC emacs-lisp
  (setq company-idle-delay 0.2)
#+END_SRC

Trigger company completion everytime
#+BEGIN_SRC emacs-lisp
  (setq company-minimum-prefix-length 0)
#+END_SRC

Trigger company completion only when 3 chars have been typed. Currently disabled.
#+BEGIN_SRC emacs-lisp :tangle no
  (add-hook 'org-mode-hook
            (lambda () ((setq (make-local-variable 'company-minimum-prefix-length) 3))
                        ))
#+END_SRC

#+RESULTS:

Don't downcase in case of company autocomplete
#+BEGIN_SRC emacs-lisp
  (setq company-dabbrev-downcase nil)
#+END_SRC

Don't show snippet popups
#+BEGIN_SRC emacs-lisp
 (setq auto-completion-enable-snippets-in-popup nil)
#+END_SRC

Autocomplete sort by word usage
#+BEGIN_SRC emacs-lisp
 (setq auto-completion-enable-sort-by-usage t)
#+END_SRC

Don't do anything on return as prefix length is zero
#+BEGIN_SRC emacs-lisp
 (setq auto-completion-return-key-behavior nil)
#+END_SRC

Autocomplete on =jk=
#+BEGIN_SRC emacs-lisp
(setq auto-completion-complete-with-key-sequence "jk")
#+END_SRC
** Evil goggles

Evil googles highlight what is yanked etc in evil mode ([[https://github.com/edkolev/evil-goggles][source]])
#+BEGIN_SRC emacs-lisp
  (use-package evil-goggles
    :ensure t
    :config
    (evil-goggles-mode)

    ;; optionally use diff-mode's faces; as a result, deleted text
    ;; will be highlighed with `diff-removed` face which is typically
    ;; some red color (as defined by the color theme)
    ;; other faces such as `diff-added` will be used for other actions
    (evil-goggles-use-diff-faces))

#+END_SRC
** Doom theme configuration
#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; treemacs
    (doom-themes-treemacs-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config)
    )

#+END_SRC
** Go mode
go-direx to show what all is contained in a go file. remap =,,= to =gofmt=.
#+BEGIN_SRC emacs-lisp
  (use-package go-direx
    :ensure t
    :config
    (spacemacs/set-leader-keys-for-major-mode 'go-mode "=" 'go-direx-pop-to-buffer)
    (spacemacs/set-leader-keys-for-major-mode 'go-mode "," 'gofmt)
    )
#+END_SRC

Use much better godoc at point function
#+BEGIN_SRC emacs-lisp
  (setq godoc-at-point-function 'godoc-gogetdoc)
#+END_SRC

Set tab width to 4
#+BEGIN_SRC emacs-lisp
 (setq go-tab-width 4)
#+END_SRC

Run goformat before save
#+BEGIN_SRC emacs-lisp
 (setq go-format-before-save t)
#+END_SRC

Run goimports on save
#+BEGIN_SRC emacs-lisp
 (setq gofmt-command "goimports")
#+END_SRC

Use gocheck for testing
#+BEGIN_SRC emacs-lisp
(setq go-use-gocheck-for-testing t)
#+END_SRC

Use golangci as linter instead of gometaliner
#+BEGIN_SRC emacs-lisp
(setq go-use-golangci-lint t)
#+END_SRC
** LSP configuration
Langauge Server settings. Currently disabled.

Disable lsp ui ([[https://github.com/syl20bnr/spacemacs/issues/11265][source]]) and stop creating lock files ([[https://github.com/emacs-lsp/lsp-mode/issues/378][source]])
#+BEGIN_SRC emacs-lisp :tangle no
  (setq lsp-ui-flycheck-enable nil)
  (setq create-lockfiles nil)
#+END_SRC
** File mode configurations
Enable emacs mode depending on the file format

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.avsc\\'" . json-mode))
  (add-to-list 'auto-mode-alist '("\\.csv\\'" . org-mode))
  (add-to-list 'auto-mode-alist '("\\.zsh\\'" . sh-mode))
#+END_SRC
** Org mode
*** Babel settings
Don't ask confirmation while executing in org buffers
#+BEGIN_SRC emacs-lisp
 (setq org-confirm-babel-evaluate nil)
#+END_SRC
*** Custom functions
A nifty function to insert current time in the buffer. Bound to =,;=
#+BEGIN_SRC emacs-lisp
    (defvar current-time-format "%H:%M"
      "Format of date to insert with `insert-current-time' func.
  Note the weekly scope of the command's precision.")
    (defun insert-current-time ()
      "insert the current time (1-week scope) into the current buffer."
      (interactive)
      (insert (format-time-string current-time-format (current-time)))
      (insert " - ")
      )
  (spacemacs/set-leader-keys-for-major-mode 'org-mode ";" 'insert-current-time)
#+END_SRC
*** Column view
Column view default columns
#+BEGIN_SRC emacs-lisp
 (setq org-agenda-overriding-columns-format "%7TODO(Todo) %40ITEM(Task) %TAGS(Tags) %6CLOCKSUM(Actual) %8Effort(Estimate){:}")
#+END_SRC
TODO states
#+BEGIN_SRC emacs-lisp
 (setq org-todo-keywords
       '((sequence "TODO(t)" "INPROGRESS(p/!)" "STOPPED(s/!)" "WAIT(w@/!)" "|" "DONE(d@/!)" "CANCELLED(c@)")))

 (setq org-log-states-order-reversed t)
#+END_SRC
*** Clocking
Clocking configuration
#+BEGIN_SRC emacs-lisp
  ;; Resume clocking task when emacs is restarted
  (org-clock-persistence-insinuate)
  ;; Save the running clock and all clock history when exiting Emacs, load it on startup
  (setq org-clock-persist t)
  ;; Resume clocking task on clock-in if the clock is open
  (setq org-clock-in-resume t)
  ;; Do not prompt to resume an active clock, just resume it
  (setq org-clock-persist-query-resume nil)

  ;; Change tasks to whatever when clocking out
  (setq org-clock-out-switch-to-state "STOPPED")
  ;; Change tasks to whatever when clocking in
  (setq org-clock-in-switch-to-state "INPROGRESS")
  ;; Save clock data and state changes and notes in the LOGBOOK drawer
  (setq org-clock-into-drawer t)
  ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks
  ;; with 0:00 duration
  (setq org-clock-out-remove-zero-time-clocks t)
  ;; Clock out when moving task to a done state
  (setq org-clock-out-when-done t)
  ;; Enable auto clock resolution for finding open clocks
  ;; commenting out as I don't know what this does
  ;; (setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
  ;; Include current clocking task in clock reports
  (setq org-clock-report-include-clocking-task t)
  ;; use pretty things for the clocktable
  (setq org-pretty-entities t)

 (spacemacs/toggle-mode-line-org-clock-on)
#+END_SRC
Clocking and other keybindings
#+BEGIN_SRC emacs-lisp
 (spacemacs/set-leader-keys-for-major-mode 'org-mode "c" nil)
 (spacemacs/set-leader-keys-for-major-mode 'org-mode "I" nil)
 (spacemacs/set-leader-keys-for-major-mode 'org-mode "O" nil)
 (spacemacs/set-leader-keys-for-major-mode 'org-mode "Q" nil)
 (spacemacs/declare-prefix-for-mode 'org-mode "c" "clock")
 (spacemacs/set-leader-keys-for-major-mode 'org-mode "ck" 'org-clock-cancel)
 (spacemacs/set-leader-keys-for-major-mode 'org-mode "cd" 'org-clock-display)
 (spacemacs/set-leader-keys-for-major-mode 'org-mode "co" 'org-clock-out)
 (spacemacs/set-leader-keys-for-major-mode 'org-mode "cc" 'org-clock-in-last)
 (spacemacs/set-leader-keys-for-major-mode 'org-mode "ci" 'org-clock-in)

 (spacemacs/set-leader-keys-for-major-mode 'org-mode "ic" 'org-cliplink)
 (spacemacs/declare-prefix-for-mode 'org-mode "v" "view")
 (spacemacs/set-leader-keys-for-major-mode 'org-mode "vc" 'org-columns)

 (spacemacs/set-leader-keys-for-major-mode 'org-mode "I" 'org-add-note)
#+END_SRC
*** Generic
Indent in org mode
#+BEGIN_SRC emacs-lisp
 (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC

Enable org autolist mode
#+BEGIN_SRC emacs-lisp :tangle no
 (add-hook 'org-mode-hook (lambda () (org-autolist-mode)))
#+END_SRC

Keep super and subscripts as it is
#+BEGIN_SRC emacs-lisp
 (setq org-use-sub-superscripts nil)
#+END_SRC

Don't startup truncated. Currently disabled.
#+BEGIN_SRC emacs-lisp :tangle no
 (setq org-startup-truncated nil)
#+END_SRC
Remap =C-'= to nil so that avy can work as expected
#+BEGIN_SRC emacs-lisp
 (define-key org-mode-map (kbd "C-'") nil)
#+END_SRC

Adding [[https://github.com/snosov1/toc-org/blob/master/README.org][toc-org]] to generate toc for github in buffer
#+BEGIN_SRC emacs-lisp
  (use-package toc-org
    :ensure t
    :config
    (add-hook 'org-mode-hook 'toc-org-mode)
    (add-to-list 'org-tag-alist '("TOC" . ?T))
    )
#+END_SRC

#+RESULTS:
: t


*** Export
Get org export to pdf working ([[https://emacs.stackexchange.com/questions/20839/exporting-code-blocks-to-pdf-via-latex][source]])
#+BEGIN_SRC emacs-lisp
 (use-package org
   :ensure t
   :config
   (progn
     ;; (use-package ox-latex :ensure t)
     (add-to-list 'org-latex-packages-alist '("" "minted"))
     (setq org-latex-listings 'minted)

     (setq org-latex-pdf-process
           '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
             "bibtex %b"
             "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
             "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

     (setq org-src-fontify-natively t)

     (org-babel-do-load-languages
      'org-babel-load-languages
      '((R . t)
        (latex . t)))
     )
   )
#+END_SRC
*** GTD

Org mode files
#+BEGIN_SRC emacs-lisp
 (defun my-org/open-inbox-file()
   (interactive)
   (find-file "~/Dropbox/org/gtd/inbox.org")
   )

 (defun my-org/open-gtd-file()
   (interactive)
   (find-file "~/Dropbox/org/gtd/gtd.org")
   )

 (spacemacs/set-leader-keys
   "oo" 'org-capture
   "oi" 'my-org/open-inbox-file
   "og" 'my-org/open-gtd-file
   "oa" 'org-agenda
   "oc" 'org-clock-goto
   )

#+END_SRC

Effort configurations
#+BEGIN_SRC emacs-lisp
 (setq org-global-properties
       '(("Effort_ALL" .
          "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 8:00")))

#+END_SRC

Log changes in drawer
#+BEGIN_SRC emacs-lisp
 (setq org-log-into-drawer t)
#+END_SRC

Org id set and export
#+BEGIN_SRC emacs-lisp
  (setq org-id-link-to-org-use-id t)
  (setq org-export-with-section-numbers nil)

  (add-hook 'org-capture-prepare-finalize-hook 'org-id-get-create)
  (add-hook 'org-capture-after-finalize-hook  'org-id-update-id-locations)

#+END_SRC

Org capture templates
#+BEGIN_SRC emacs-lisp
 (setq org-capture-templates '(("t" "Todo [inbox]" entry
                                (file+headline "~/Dropbox/org/gtd/inbox.org" "Tasks")
                                (file "~/Dropbox/org/templates/todo.orgcaptmpl")
                                :empty-lines 1)
                               ("T" "Tickler" entry
                                (file+headline "~/Dropbox/org/gtd/tickler.org" "Tickler")
                                "* %i%? \n %U" :empty-lines 1)
                               ("i" "Interview"
                                entry
                                (file "~/Dropbox/org/interviews.org")
                                (file "~/Dropbox/org/templates/interview.orgcaptmpl"))
                               ("n" "Note" entry
                                (file+headline "~/Dropbox/org/notes.org" "Notes")
                                "* %i%? %^g\nLogged on %U" :empty-lines 1)
                               ("j" "Journal" entry
                                (file+olp+datetree "~/Dropbox/org/journal.org")
                                "* Logged on %U\n- %?" :empty-lines 1)))
#+END_SRC

Org refiling configuration
#+BEGIN_SRC emacs-lisp
 (setq org-refile-targets '(("~/Dropbox/org/gtd/gtd.org" :maxlevel . 3)
                            ("~/Dropbox/org/gtd/someday.org" :level . 1)
                            ("~/Dropbox/org/gtd/tickler.org" :maxlevel . 2)))
 (setq org-refile-use-outline-path 'file
       org-outline-path-complete-in-steps nil)
 (setq org-refile-allow-creating-parent-nodes 'confirm)

#+END_SRC

List of agenda files
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/Dropbox/org/gtd/inbox.org"
                           "~/Dropbox/org/gtd/gtd.org"
                           "~/Dropbox/org/gtd/tickler.org"))

 (setq arnav/org-agenda-someday-view
       `("s" "Someday" todo ""
         ((org-agenda-files '("~/Dropbox/org/gtd/someday.org")))))

 (setq arnav/org-agenda-banker-view
       `("b" "Banker" search "LEVEL=1/Banker"
         ((org-agenda-files '("~/Dropbox/org/gtd/gtd.org")))))

 (setq arnav/org-agenda-inbox-view
       `("i" "Inbox" todo ""
         ((org-agenda-files '("~/Dropbox/org/gtd/inbox.org")))))

 (setq arnav/org-agenda-tickler-view
       `("T" "tickler" todo ""
         ((org-agenda-files '("~/Dropbox/org/gtd/tickler.org")))))

 (setq org-agenda-custom-commands
       `(,arnav/org-agenda-inbox-view
         ,arnav/org-agenda-someday-view
         ,arnav/org-agenda-tickler-view
         ,arnav/org-agenda-banker-view
         ))

#+END_SRC

** Git settings
Set =giteditor= as emacs using =witheditor=
#+BEGIN_SRC emacs-lisp
  (define-key (current-global-map)
    [remap async-shell-command] 'with-editor-async-shell-command)
  (define-key (current-global-map)
    [remap shell-command] 'with-editor-shell-command)
  (add-hook 'eshell-mode-hook 'with-editor-export-editor)
  (add-hook 'term-exec-hook   'with-editor-export-editor)
#+END_SRC

Switch to alernate window when running magit. Not sure what it does. Currently disabled.
#+BEGIN_SRC emacs-lisp :tangle no
  (add-hook 'shell-command-with-editor-mode-hook 'spacemacs/alternate-window)
#+END_SRC

Show branch name before tags
#+BEGIN_SRC emacs-lisp
 (setq magit-log-show-refname-after-summary t)
#+END_SRC

Hydra for resolving merge conflicts ([[https://github.com/alphapapa/unpackaged.el#smerge-mode][source]])
#+BEGIN_SRC emacs-lisp
  (use-package smerge-mode
    :ensure t
    :config
    (defhydra unpackaged/smerge-hydra
      (:color pink :hint nil :post (smerge-auto-leave))
      "
  ^Move^       ^Keep^               ^Diff^                 ^Other^
  ^^-----------^^-------------------^^---------------------^^-------
  _n_ext       _b_ase               _<_: upper/base        _C_ombine
  _p_rev       _u_pper              _=_: upper/lower       _r_esolve
  ^^           _l_ower              _>_: base/lower        _k_ill current
  ^^           _a_ll                _R_efine
  ^^           _RET_: current       _E_diff
  "
      ("n" smerge-next)
      ("p" smerge-prev)
      ("b" smerge-keep-base)
      ("u" smerge-keep-upper)
      ("l" smerge-keep-lower)
      ("a" smerge-keep-all)
      ("RET" smerge-keep-current)
      ("\C-m" smerge-keep-current)
      ("<" smerge-diff-base-upper)
      ("=" smerge-diff-upper-lower)
      (">" smerge-diff-base-lower)
      ("R" smerge-refine)
      ("E" smerge-ediff)
      ("C" smerge-combine-with-next)
      ("r" smerge-resolve)
      ("k" smerge-kill-current)
      ("ZZ" (lambda ()
              (interactive)
              (save-buffer)
              (bury-buffer))
       "Save and bury buffer" :color blue)
      ("q" nil "cancel" :color blue))
    :hook (magit-diff-visit-file . (lambda ()
                                     (when smerge-mode
                                       (unpackaged/smerge-hydra/body)))))
#+END_SRC

#+RESULTS:
| lambda | nil | (when smerge-mode (unpackaged/smerge-hydra/body)) |


** Shell settings
Run =zsh= in an inferior shell
#+BEGIN_SRC emacs-lisp
  (setq explicit-shell-file-name "/bin/zsh")
#+END_SRC

Save history of shell-commands run
#+BEGIN_SRC emacs-lisp
  (setq savehist-save-minibuffer-history 1)
  (setq savehist-additional-variables
        '(kill-ring search-ring regexp-search-ring compile-history log-edit-comment-ring)
        savehist-file "~/.emacs.d/savehist")
  (savehist-mode t)
#+END_SRC

Exit async buffer on =q=
#+BEGIN_SRC emacs-lisp
 (defun maybe-set-quit-key ()
   (when (string= (buffer-name) "*Async Shell Command*")
     (local-set-key (kbd "q") #'quit-window)))

 (add-hook 'shell-mode-hook #'maybe-set-quit-key)
#+END_SRC

SHX package for extra shell niceities
#+BEGIN_SRC emacs-lisp
  (use-package shx
    :ensure t
    :config
    (shx-global-mode 1))
#+END_SRC

#+RESULTS:
: t

** PDF settings
Turn off line numbering in pdf view
#+BEGIN_SRC emacs-lisp
 (add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1)))
#+END_SRC

** Autosave go and emacs buffer
Auto save org and go mode buffers after 15 odd minutes
#+BEGIN_SRC emacs-lisp
 (use-package real-auto-save
   :init
   (setq real-auto-save-interval 1800)
   :config
   (add-hook 'org-mode-hook 'real-auto-save-mode)
   (add-hook 'go-mode-hook 'real-auto-save-mode)
   )

#+END_SRC
** Tramp mode
Tramp mode speedups attempts ([[https://www.emacswiki.org/emacs/TrampMode][source]])
#+BEGIN_SRC emacs-lisp
 (setq remote-file-name-inhibit-cache nil)
 (setq tramp-completion-reread-directory-timeout nil)
 (setq vc-ignore-dir-regexp
       (format "\\(%s\\)\\|\\(%s\\)"
               vc-ignore-dir-regexp
               tramp-file-name-regexp))
#+END_SRC

Run to change tramp mode verbosity
#+BEGIN_SRC emacs-lisp :tangle no
 (setq tramp-verbose 3)
#+END_SRC
** Avy
Set timeout for avy timer
#+BEGIN_SRC emacs-lisp
 (setq avy-timeout-seconds 0.5)
#+END_SRC
** Midnight
Remove unused buffers after a certain time

#+BEGIN_SRC emacs-lisp
(use-package midnight
:ensure t)
#+END_SRC

* Finish loading
#+BEGIN_SRC emacs-lisp
  (alert "Successfully loaded: booyeah" :title "Dotspacemacs")
#+END_SRC

#+RESULTS:
Wrong type argument: integer-or-marker-p, nil
(eshell-life-is-too-much)
